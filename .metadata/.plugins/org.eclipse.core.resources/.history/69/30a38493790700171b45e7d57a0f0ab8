package textShape;

/*
 * Shape assumes a bounding box defined by its opposing corners. In contrast, TextView
is defined by an origin, height, and width. Shape also defines a CreateManipulator
operation for creating a Manipulator object, which knows how to animate a shape
when the user manipulates it.1 TextView has no equivalent operation. The class
TextShape is an adapter between these different interfaces. (GoF)

TextViex uses Coord to define the positions, these are in fact integers (x, y, width, height.
TextShape uses points, implemented here as tuples of integers.
 */

public class TextShape extends Shape {
	
	private TextView textview;
	private String text;

	TextShape() {
		/*with default coordinates: x = 0, y = 0, height = 2, width = 3 */
		TextView textview = new TextView(); //or use an existing textview
		//Write textview data to screen
		String tvData = "TextView default data:\n";
		tvData += " origin x = " + textview.getOrigin()[0];
		tvData += ", origin y = " + textview.getOrigin()[1];
		tvData += ", height = " + textview.getExtent()[0];
		tvData += ", width = " + textview.getExtent()[1];
		System.out.println(tvData);
	}

	/* use an existing textview */ 
	TextShape(TextView tv) {
		textview = tv;
	}
	
	@Override
	public Point[] boundingBox() {
		Point[] points = new Point[2];
		Coord bottom = null, left = null, width, height;
		
		bottom = textview.getOrigin()[0];
		left = textview.getOrigin()[1];
		width = textview.getExtent()[0];
		height = textview.getExtent()[1];
		
		Point bottomLeft = new Point(bottom.c, left.c);
		Point topRight = new Point(bottom.add(width).c, left.add(height).c);
		points[0] = bottomLeft;
		points[1] = topRight;
		return points;
	}
	
	public boolean isEmpty() {
		return textview.isEmpty();
	}
	
	//delegate to textview
	public String formatText() {
		textview.setText(text);
		return textview.uppercaseText();
	}
	
	public void setText(String text) {
		this.text = text;
	}
	
	public String getText() {
		return text;
	}


}
